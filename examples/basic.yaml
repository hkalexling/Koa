---
openapi: 3.0.0
info:
  title: Test API
  version: 1.0.0
servers:
- url: 127.0.0.1:3000
paths:
  /user:
    get:
      tags:
      - user
      summary: Lists all users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
    post:
      tags:
      - user
      - auth
      summary: Creates a new user
      requestBody:
        description: A JSON string containing the new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "200":
          description: OK
      security:
      - cookie: []
      - basic: []
  /user/{id}:
    get:
      tags:
      - user
      summary: Returns a user with `id`
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "404":
          description: User not found
  /user/{username}:
    get:
      tags:
      - user
      summary: Returns a user with `username`
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "404":
          description: User not found
  /user/search:
    get:
      tags:
      - user
      summary: Returns a list of users matching `query`
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                - users
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
                  error:
                    type: string
  /profile_pic/{id}:
    get:
      tags:
      - user
      summary: Returns the profile picture of a user with `id`
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            image/*:
              schema:
                $ref: '#/components/schemas/image'
components:
  schemas:
    image:
      type: string
      format: binary
    matrix:
      type: array
      items:
        type: array
        items:
          type: integer
          format: int32
    points:
      type: array
      items:
        required:
        - longitude
        - latitude
        type: object
        properties:
          longitude:
            type: integer
            format: int32
          latitude:
            type: integer
            format: int32
    user:
      required:
      - id
      - username
      - friends
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        friends:
          type: array
          items:
            $ref: '#/components/schemas/user'
    optional:
      type: object
      properties:
        optionalNumber:
          type: integer
          format: int32
        optionalArray:
          type: array
          items:
            type: integer
            format: int32
        optionalObject:
          type: object
          properties: {}
    post:
      required:
      - id
      - author
      - metadata
      - content
      type: object
      properties:
        id:
          type: string
        author:
          $ref: '#/components/schemas/user'
        metadata:
          required:
          - timestamp
          - location
          - nsfw
          type: object
          properties:
            timestamp:
              type: integer
              format: int64
            location:
              $ref: '#/components/schemas/points'
            nsfw:
              type: boolean
        content:
          required:
          - text
          - media
          type: object
          properties:
            text:
              type: string
            media:
              type: object
              properties:
                video:
                  type: array
                  items:
                    type: string
                audio:
                  type: array
                  items:
                    type: string
                image:
                  type: array
                  items:
                    type: string
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    cookie:
      type: apiKey
      name: session-id
      in: cookie
    basic:
      type: http
      scheme: basic
  links: {}
  callbacks: {}
tags:
- name: user
  description: Operations on users
